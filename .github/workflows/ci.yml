name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate:
    name: Validate
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.15.1
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Generate Prisma types
        run: |
          cd apps/web
          pnpm prisma generate
        
      - name: Type Check
        run: pnpm typecheck
        
      - name: Lint
        run: pnpm lint
        
      - name: Test
        run: pnpm test
        env:
          CI: true
        
      - name: Build
        run: pnpm build

  build-and-push:
    needs: validate
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    permissions:
      contents: read
      packages: write
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: runner

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Setup Tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
          
      - name: Deploy to Preview
        if: github.ref == 'refs/heads/develop'
        run: |
          # Update the stack with new image tag
          curl -X PUT \
            -H "X-API-Key: ${{ secrets.PORTAINER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "env": {
                "GITHUB_SHA": "${{ github.sha }}"
              }
            }' \
            ${{ secrets.PORTAINER_HOST }}/api/stacks/soccer-preview?endpointId=1
            
      - name: Deploy to Production
        if: github.ref == 'refs/heads/main'
        run: |
          # Update the stack with new image tag
          curl -X PUT \
            -H "X-API-Key: ${{ secrets.PORTAINER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "env": {
                "GITHUB_SHA": "${{ github.sha }}"
              }
            }' \
            ${{ secrets.PORTAINER_HOST }}/api/stacks/soccer-prod?endpointId=1

  e2e-tests:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          
      - run: pnpm install --frozen-lockfile
      
      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps chromium
        working-directory: apps/web
      
      - name: Set test URL based on branch
        id: set-url
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "test_url=https://preview.soccer-unify.com" >> $GITHUB_OUTPUT
          else
            echo "test_url=https://soccer-unify.com" >> $GITHUB_OUTPUT
          fi
      
      - name: Wait for deployment
        run: |
          TEST_URL="${{ steps.set-url.outputs.test_url }}"
          for i in {1..30}; do
            if curl -f "${TEST_URL}/api/health" --connect-timeout 10; then
              echo "Deployment is ready!"
              break
            fi
            echo "Waiting for deployment... ($i/30)"
            sleep 10
          done
        
      - name: Run E2E tests
        run: pnpm test:e2e
        working-directory: apps/web
        env:
          PLAYWRIGHT_BASE_URL: ${{ steps.set-url.outputs.test_url }}