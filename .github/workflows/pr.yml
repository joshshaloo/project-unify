name: PR Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

concurrency:
  group: pr-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  # Detect what changed to optimize CI time
  detect-changes:
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    outputs:
      web-changed: ${{ steps.changes.outputs.web }}
      docs-changed: ${{ steps.changes.outputs.docs }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            web:
              - 'apps/web/**'
              - 'packages/**'
              - 'pnpm-lock.yaml'
              - 'package.json'
              - 'Dockerfile'
              - '.github/workflows/**'
            docs:
              - '**/*.md'
              - 'docs/**'

  # Run all validation steps for PRs
  validate:
    needs: detect-changes
    if: github.event.action != 'closed' && needs.detect-changes.outputs.web-changed == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.15.1
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Generate Prisma types
        run: |
          cd apps/web
          pnpm prisma generate
        
      - name: Type Check
        run: pnpm typecheck
        
      - name: Lint
        run: pnpm lint
        
      - name: Unit Tests
        run: pnpm test
        env:
          CI: true
          
      - name: Integration Tests
        run: pnpm test:integration
        working-directory: apps/web
        env:
          CI: true
        
      - name: Build
        run: pnpm build

  # Build and push PR-specific Docker image
  build-pr-image:
    needs: validate
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      pull-requests: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=pr,prefix=pr-
            type=sha,prefix=pr-${{ github.event.pull_request.number }}-
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: runner
          build-args: |
            NEXT_PUBLIC_APP_URL=https://pr-${{ github.event.pull_request.number }}.preview.soccer-unify.com

  # Deploy PR preview
  deploy-pr-preview:
    needs: build-pr-image
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    outputs:
      preview-url: ${{ steps.deploy.outputs.preview-url }}
    
    steps:
      - name: Setup Tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
      
      - name: Deploy PR to Homelab
        id: deploy
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          IMAGE_TAG: pr-${{ github.event.pull_request.number }}
        run: |
          # Create stack name for PR
          STACK_NAME="soccer-pr-${PR_NUMBER}"
          PREVIEW_URL="https://pr-${PR_NUMBER}.preview.soccer-unify.com"
          
          # Create or update stack via Portainer API
          STACK_FILE_CONTENT=$(cat <<EOF
          version: "3.9"
          services:
            web:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}
              environment:
                - NODE_ENV=preview
                - DATABASE_URL=${{ secrets.DATABASE_URL_PREVIEW }}
                - NEXT_PUBLIC_APP_URL=${PREVIEW_URL}
                - NEXTAUTH_URL=${PREVIEW_URL}
                - NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
                - OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
                - N8N_WEBHOOK_URL=${{ secrets.N8N_WEBHOOK_URL }}
                - EMAIL_SERVER_HOST=${{ secrets.EMAIL_SERVER_HOST }}
                - EMAIL_SERVER_PORT=${{ secrets.EMAIL_SERVER_PORT }}
                - EMAIL_FROM=${{ secrets.EMAIL_FROM }}
                - PORT=3000
              labels:
                - traefik.enable=true
                - traefik.http.routers.pr-${PR_NUMBER}.rule=Host(\`pr-${PR_NUMBER}.preview.soccer-unify.com\`)
                - traefik.http.routers.pr-${PR_NUMBER}.tls=true
                - traefik.http.services.pr-${PR_NUMBER}.loadbalancer.server.port=3000
                - com.soccer.pr=${PR_NUMBER}
                - com.soccer.type=preview
              networks:
                - traefik
                - internal
              deploy:
                replicas: 1
                update_config:
                  parallelism: 1
                  delay: 10s
                restart_policy:
                  condition: on-failure
                  delay: 5s
                  max_attempts: 3
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
                interval: 30s
                timeout: 3s
                retries: 3
          
          networks:
            traefik:
              external: true
            internal:
              driver: overlay
          EOF
          )
          
          # Try to update existing stack first, then create if it doesn't exist
          curl -X PUT \
            -H "X-API-Key: ${{ secrets.PORTAINER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"stackFileContent\": \"${STACK_FILE_CONTENT//\"/\\\"}\"
            }" \
            ${{ secrets.PORTAINER_HOST }}/api/stacks/${STACK_NAME}?endpointId=1 || \
          curl -X POST \
            -H "X-API-Key: ${{ secrets.PORTAINER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"name\": \"${STACK_NAME}\",
              \"type\": 2,
              \"endpointId\": 1,
              \"stackFileContent\": \"${STACK_FILE_CONTENT//\"/\\\"}\"
            }" \
            ${{ secrets.PORTAINER_HOST }}/api/stacks?type=2&method=string&endpointId=1
          
          echo "preview-url=${PREVIEW_URL}" >> $GITHUB_OUTPUT
      
      - name: Wait for deployment
        run: |
          for i in {1..30}; do
            if curl -f "${{ steps.deploy.outputs.preview-url }}/api/health" \
              --connect-timeout 10 \
              -k; then
              echo "Deployment is ready!"
              break
            fi
            echo "Waiting for deployment... ($i/30)"
            sleep 10
          done
      
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.issue.number;
            const previewUrl = '${{ steps.deploy.outputs.preview-url }}';
            
            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('Preview Deployment')
            );
            
            const body = `## 🚀 Preview Deployment Ready!
            
            **Preview URL:** ${previewUrl}
            **Stack:** soccer-pr-${prNumber}
            
            The deployment will be automatically cleaned up when this PR is closed.`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: body
              });
            }

  # Run E2E tests against PR preview
  test-pr-preview:
    needs: deploy-pr-preview
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps chromium
        working-directory: apps/web
      
      - name: Run E2E tests against preview
        run: pnpm test:e2e --project=chromium
        working-directory: apps/web
        env:
          PLAYWRIGHT_BASE_URL: ${{ needs.deploy-pr-preview.outputs.preview-url }}
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pr-test-results-${{ github.event.pull_request.number }}
          path: |
            apps/web/playwright-report/
            apps/web/test-results/
          retention-days: 7

  # Update PR status with all check results
  update-pr-status:
    needs: [validate, test-pr-preview]
    if: always() && github.event.action != 'closed'
    runs-on: ubuntu-latest
    
    steps:
      - name: Comment test results
        uses: actions/github-script@v7
        with:
          script: |
            const validateResult = '${{ needs.validate.result }}';
            const e2eResult = '${{ needs.test-pr-preview.result }}';
            
            let statusEmoji = '✅';
            let statusText = 'All checks passed!';
            
            if (validateResult === 'failure' || e2eResult === 'failure') {
              statusEmoji = '❌';
              statusText = 'Some checks failed';
            }
            
            const body = `## ${statusEmoji} PR Status Update
            
            **Validation:** ${validateResult === 'success' ? '✅ Passed' : '❌ Failed'}
            **E2E Tests:** ${e2eResult === 'success' ? '✅ Passed' : '❌ Failed'}
            
            ${statusText}`;
            
            // Find existing status comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const statusComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('PR Status Update')
            );
            
            if (statusComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: statusComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  # Clean up PR resources when closed
  cleanup-pr-preview:
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    
    steps:
      - name: Setup Tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
      
      - name: Remove PR Stack
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          STACK_NAME="soccer-pr-${PR_NUMBER}"
          
          # Delete the stack
          curl -X DELETE \
            -H "X-API-Key: ${{ secrets.PORTAINER_API_KEY }}" \
            ${{ secrets.PORTAINER_HOST }}/api/stacks/${STACK_NAME}?endpointId=1
          
          echo "✅ Cleaned up preview deployment for PR #${PR_NUMBER}"
      
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '🧹 Preview deployment has been cleaned up.'
            });