name: PR Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

concurrency:
  group: pr-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  # Build and validate everything through Docker
  build-and-validate:
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      pull-requests: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=pr,prefix=pr-
            type=sha,prefix=pr-${{ github.event.pull_request.number }}-
      
      - name: Build and validate with Docker
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: tester  # This runs all tests in the multi-stage build
          build-args: |
            DATABASE_URL=postgresql://postgres:password@localhost:5432/test
            NEXTAUTH_SECRET=test-secret-for-build-only
            NEXTAUTH_URL=http://localhost:3000
      
      - name: Build production image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: runner  # Production stage
          build-args: |
            NEXT_PUBLIC_APP_URL=https://preview.soccer-unify.com

  # Deploy PR preview
  deploy-pr-preview:
    needs: build-and-validate
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    outputs:
      preview-url: ${{ steps.deploy.outputs.preview-url }}
    
    steps:
      - name: Setup Tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
      
      - name: Deploy PR to Preview Environment
        id: deploy
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          IMAGE_TAG: pr-${{ github.event.pull_request.number }}
        run: |
          # Deploy to shared preview environment
          STACK_NAME="soccer-preview"
          PREVIEW_URL="https://preview.soccer-unify.com"
          
          # Update preview stack with PR image
          curl -X PUT \
            -H "X-API-Key: ${{ secrets.PORTAINER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "env": {
                "GITHUB_SHA": "'${IMAGE_TAG}'",
                "GITHUB_REPOSITORY": "${{ github.repository }}"
              }
            }' \
            ${{ secrets.PORTAINER_HOST }}/api/stacks/${STACK_NAME}?endpointId=1
          
          echo "preview-url=${PREVIEW_URL}" >> $GITHUB_OUTPUT
      
      - name: Wait for deployment
        run: |
          for i in {1..30}; do
            if curl -f "${{ steps.deploy.outputs.preview-url }}/api/health" \
              --connect-timeout 10 \
              -k; then
              echo "Deployment is ready!"
              break
            fi
            echo "Waiting for deployment... ($i/30)"
            sleep 10
          done
      
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.issue.number;
            const previewUrl = '${{ steps.deploy.outputs.preview-url }}';
            
            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('Preview Deployment')
            );
            
            const body = `## 🚀 Preview Deployment Ready!
            
            **Preview URL:** ${previewUrl}
            **Image Tag:** pr-${prNumber}
            
            This PR has been deployed to the shared preview environment.`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: body
              });
            }

  # Run E2E tests against PR preview
  test-pr-preview:
    needs: deploy-pr-preview
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps chromium
        working-directory: apps/web
      
      - name: Run E2E tests against preview
        run: pnpm test:e2e --project=chromium
        working-directory: apps/web
        env:
          PLAYWRIGHT_BASE_URL: ${{ needs.deploy-pr-preview.outputs.preview-url }}
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pr-test-results-${{ github.event.pull_request.number }}
          path: |
            apps/web/playwright-report/
            apps/web/test-results/
          retention-days: 7

  # Update PR status with all check results
  update-pr-status:
    needs: [build-and-validate, test-pr-preview]
    if: always() && github.event.action != 'closed'
    runs-on: ubuntu-latest
    
    steps:
      - name: Comment test results
        uses: actions/github-script@v7
        with:
          script: |
            const buildResult = '${{ needs.build-and-validate.result }}';
            const e2eResult = '${{ needs.test-pr-preview.result }}';
            
            let statusEmoji = '✅';
            let statusText = 'All checks passed!';
            
            if (buildResult === 'failure' || e2eResult === 'failure') {
              statusEmoji = '❌';
              statusText = 'Some checks failed';
            }
            
            const body = `## ${statusEmoji} PR Status Update
            
            **Build & Validation:** ${buildResult === 'success' ? '✅ Passed' : '❌ Failed'}
            **E2E Tests:** ${e2eResult === 'success' ? '✅ Passed' : '❌ Failed'}
            
            ${statusText}`;
            
            // Find existing status comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const statusComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('PR Status Update')
            );
            
            if (statusComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: statusComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  # Clean up PR resources when closed
  cleanup-pr-preview:
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    
    steps:
      - name: Setup Tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
      
      - name: Note PR Closure
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          echo "✅ PR #${PR_NUMBER} has been closed. Preview environment remains available for other PRs."
      
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '✅ PR closed. The preview environment remains available for other PRs.'
            });