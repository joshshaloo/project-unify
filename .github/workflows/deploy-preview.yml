name: Deploy Preview & Test

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    outputs:
      preview-url: ${{ steps.deploy.outputs.preview-url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build
        working-directory: apps/web
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Deploy to Vercel Preview
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: apps/web
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Comment PR with preview URL
        uses: actions/github-script@v6
        with:
          script: |
            const previewUrl = '${{ steps.deploy.outputs.preview-url }}'
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ Preview deployment ready!
              
              **Preview URL:** ${previewUrl}
              
              The preview deployment will be tested automatically. Check back for test results.`
            })

  test-preview:
    runs-on: ubuntu-latest
    needs: deploy-preview
    if: needs.deploy-preview.outputs.preview-url != ''
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps chromium
        working-directory: apps/web

      - name: Wait for deployment to be ready
        run: |
          for i in {1..30}; do
            if curl -f "${{ needs.deploy-preview.outputs.preview-url }}/api/health" --connect-timeout 10; then
              echo "Deployment is ready!"
              break
            fi
            echo "Waiting for deployment... ($i/30)"
            sleep 10
          done

      - name: Run E2E tests against preview
        run: pnpm test:e2e --project=chromium
        working-directory: apps/web
        env:
          PLAYWRIGHT_BASE_URL: ${{ needs.deploy-preview.outputs.preview-url }}

      - name: Run API tests against preview
        run: pnpm test --run --testNamePattern="api" --testTimeout=30000
        working-directory: apps/web
        env:
          TEST_BASE_URL: ${{ needs.deploy-preview.outputs.preview-url }}

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: preview-test-results
          path: |
            apps/web/playwright-report/
            apps/web/test-results/
          retention-days: 7

  update-pr-status:
    runs-on: ubuntu-latest
    needs: [deploy-preview, test-preview]
    if: always()
    steps:
      - name: Update PR with test results
        uses: actions/github-script@v6
        with:
          script: |
            const deployStatus = '${{ needs.deploy-preview.result }}'
            const testStatus = '${{ needs.test-preview.result }}'
            const previewUrl = '${{ needs.deploy-preview.outputs.preview-url }}'
            
            let statusEmoji = '‚úÖ'
            let statusText = 'All checks passed!'
            
            if (deployStatus === 'failure') {
              statusEmoji = '‚ùå'
              statusText = 'Deployment failed'
            } else if (testStatus === 'failure') {
              statusEmoji = '‚ùå'
              statusText = 'Preview tests failed'
            } else if (testStatus === 'cancelled' || deployStatus === 'cancelled') {
              statusEmoji = '‚è∏Ô∏è'
              statusText = 'Checks were cancelled'
            }
            
            const body = `## ${statusEmoji} Preview Deployment Status
            
            **Deployment:** ${deployStatus === 'success' ? '‚úÖ Success' : '‚ùå Failed'}
            **Tests:** ${testStatus === 'success' ? '‚úÖ Passed' : testStatus === 'failure' ? '‚ùå Failed' : '‚è∏Ô∏è Cancelled'}
            
            ${previewUrl ? `**Preview URL:** ${previewUrl}` : ''}
            
            ${statusText}
            
            <details>
            <summary>Test Details</summary>
            
            - **API Tests:** ${testStatus === 'success' ? '‚úÖ Passed' : '‚ùå Failed'}
            - **E2E Tests:** ${testStatus === 'success' ? '‚úÖ Passed' : '‚ùå Failed'}
            
            ${testStatus === 'failure' ? 'Check the [Actions tab](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed test results.' : ''}
            </details>`
            
            // Find existing comment
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            
            const existingComment = comments.data.find(comment => 
              comment.body.includes('Preview Deployment Status')
            )
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              })
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              })
            }

      - name: Set PR status check
        uses: actions/github-script@v6
        with:
          script: |
            const testStatus = '${{ needs.test-preview.result }}'
            const deployStatus = '${{ needs.deploy-preview.result }}'
            
            let state = 'success'
            let description = 'All preview tests passed'
            
            if (deployStatus === 'failure') {
              state = 'failure'
              description = 'Preview deployment failed'
            } else if (testStatus === 'failure') {
              state = 'failure'
              description = 'Preview tests failed'
            } else if (testStatus === 'cancelled' || deployStatus === 'cancelled') {
              state = 'pending'
              description = 'Preview tests were cancelled'
            }
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: state,
              target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: description,
              context: 'Preview Tests'
            })

  cleanup-on-close:
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'
    steps:
      - name: Delete preview deployment
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: apps/web
          scope: ${{ secrets.VERCEL_ORG_ID }}
          delete-deployment: true