// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Club {
  id           String    @id @default(cuid())
  name         String
  logoUrl      String?
  primaryColor String?
  settings     Json      @default("{}")
  subscription String    @default("trial") // trial, basic, premium
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  userClubs UserClub[]
  teams     Team[]
  drills    Drill[]
  sessions  Session[]
  templates SessionTemplate[]
  invitations Invitation[]

  @@index([name])
  @@index([subscription])
  @@index([createdAt])
  @@map("clubs")
}

model User {
  id                   String    @id @default(cuid())
  email                String    @unique
  name                 String?
  avatarUrl            String?
  supabaseId           String    @unique
  onboardingCompleted  Boolean   @default(false)
  preferredLanguage    String    @default("en")
  notificationSettings Json      @default("{}")
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relations
  clubs       UserClub[]
  createdSessions Session[] @relation("SessionCreator")
  playerProfiles Player[]

  @@map("users")
}

model UserClub {
  id        String   @id @default(cuid())
  userId    String
  clubId    String
  role      String   // admin, head_coach, assistant_coach, parent
  status    String   @default("active") // active, inactive, invited
  joinedAt  DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])
  club Club @relation(fields: [clubId], references: [id])

  @@unique([userId, clubId])
  @@index([userId, status])
  @@index([clubId, status])
  @@index([role])
  @@map("user_clubs")
}

model Team {
  id          String   @id @default(cuid())
  clubId      String
  name        String
  ageGroup    String   // U8, U10, U12, etc.
  skillLevel  String   // beginner, intermediate, advanced
  season      String
  isActive    Boolean  @default(true)
  settings    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  club     Club      @relation(fields: [clubId], references: [id])
  players  Player[]
  sessions Session[]

  @@map("teams")
}

model Player {
  id               String   @id @default(cuid())
  teamId           String
  userId           String?
  name             String
  dateOfBirth      DateTime
  position         String?
  jerseyNumber     String?
  profileData      Json     @default("{}")
  developmentNotes Json     @default("[]")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  team             Team              @relation(fields: [teamId], references: [id])
  user             User?             @relation(fields: [userId], references: [id])
  attendances      SessionAttendance[]
  playerEvaluations PlayerEvaluation[]

  @@map("players")
}

model Session {
  id              String    @id @default(cuid())
  clubId          String
  teamId          String
  createdByUserId String
  title           String
  date            DateTime
  duration        Int       // in minutes
  type            String    // training, match, tournament
  status          String    @default("draft") // draft, planned, completed, cancelled
  location        String?
  notes           String?
  weatherConditions String?
  plan            Json      // Detailed session plan with drills
  aiGenerated     Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  club       Club                @relation(fields: [clubId], references: [id])
  team       Team                @relation(fields: [teamId], references: [id])
  createdBy  User                @relation("SessionCreator", fields: [createdByUserId], references: [id])
  attendances SessionAttendance[]
  evaluations PlayerEvaluation[]

  @@index([clubId, date])
  @@index([teamId, date])
  @@index([status])
  @@index([type])
  @@map("sessions")
}

model SessionAttendance {
  id        String   @id @default(cuid())
  sessionId String
  playerId  String
  status    String   // present, absent, late, injured
  notes     String?
  createdAt DateTime @default(now())

  // Relations
  session Session @relation(fields: [sessionId], references: [id])
  player  Player  @relation(fields: [playerId], references: [id])

  @@unique([sessionId, playerId])
  @@map("session_attendances")
}

model Drill {
  id              String   @id @default(cuid())
  clubId          String?
  name            String
  category        String   // technical, tactical, physical, mental
  difficulty      String   // beginner, intermediate, advanced
  minPlayers      Int
  maxPlayers      Int
  duration        Int      // in minutes
  equipment       String[]
  description     String
  objectives      String[]
  setup           Json
  instructions    Json
  variations      Json     @default("[]")
  coachingPoints  String[]
  videoUrl        String?
  animationData   Json?
  tags            String[]
  isPublic        Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  club            Club?             @relation(fields: [clubId], references: [id])
  drillTemplates  SessionTemplate[]

  @@map("drills")
}

model SessionTemplate {
  id          String   @id @default(cuid())
  clubId      String
  name        String
  description String?
  ageGroups   String[]
  duration    Int      // in minutes
  objectives  String[]
  drills      Drill[]
  structure   Json     // Detailed template structure
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  club Club @relation(fields: [clubId], references: [id])

  @@map("session_templates")
}

model PlayerEvaluation {
  id         String   @id @default(cuid())
  sessionId  String
  playerId   String
  type       String   // session, monthly, seasonal
  ratings    Json     // Skill ratings
  comments   String?
  goals      Json     @default("[]")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  session Session @relation(fields: [sessionId], references: [id])
  player  Player  @relation(fields: [playerId], references: [id])

  @@map("player_evaluations")
}

model Curriculum {
  id          String   @id @default(cuid())
  name        String
  federation  String   // US Soccer, FA, etc.
  ageGroup    String
  description String
  structure   Json     // Detailed curriculum data
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("curriculums")
}

model Invitation {
  id          String   @id @default(cuid())
  clubId      String
  email       String
  role        String   // admin, head_coach, assistant_coach, parent
  token       String   @unique @default(cuid())
  expiresAt   DateTime
  usedAt      DateTime?
  usedByEmail String?
  createdBy   String
  createdAt   DateTime @default(now())
  
  // Relations
  club Club @relation(fields: [clubId], references: [id])
  
  @@index([token])
  @@index([email])
  @@map("invitations")
}