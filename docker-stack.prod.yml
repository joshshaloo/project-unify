version: '3.8'

secrets:
  postgres_password:
    external: true
    name: soccer_prod_postgres_password
  nextauth_secret:
    external: true
    name: soccer_prod_nextauth_secret
  smtp_password:
    external: true
    name: soccer_prod_smtp_password

services:
  app:
    image: ${IMAGE:-ghcr.io/joshshaloo/soccer/project-unify:latest}
    environment:
      NODE_ENV: production
      REDIS_URL: redis://redis:6379
      NEXTAUTH_URL: https://app.clubomatic.ai
      EMAIL_SERVER_HOST: ${SMTP_HOST}
      EMAIL_SERVER_PORT: ${SMTP_PORT}
      EMAIL_SERVER_USER: ${SMTP_USER}
      EMAIL_FROM: ${EMAIL_FROM}
      # Database URL and secrets are loaded from Docker secrets by entrypoint
    secrets:
      - postgres_password
      - nextauth_secret
      - smtp_password
    volumes:
      - /mnt/truenas/docker_volumes/project-unity/prod/uploads:/app/uploads
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == manager
    ports:
      - "3010:3000"
    depends_on:
      - postgres
      - redis

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: soccer
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    secrets:
      - postgres_password
    volumes:
      - /mnt/truenas/docker_volumes/project-unity/prod/postgres:/var/lib/postgresql/data
      - /mnt/truenas/docker_volumes/project-unity/prod/backups:/backups
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      placement:
        constraints:
          - node.role == manager

  postgres-init:
    image: postgres:15-alpine
    secrets:
      - postgres_password
    command: >
      sh -c '
      echo "Waiting 20 seconds for postgres to start...";
      sleep 20;
      export PGPASSWORD=$$(cat /run/secrets/postgres_password) &&
      echo "Testing connection to postgres...";
      until pg_isready -h postgres -U postgres -p 5432; do
        echo "Waiting for postgres...";
        sleep 5;
      done;
      echo "Creating n8n database if it doesn'\''t exist...";
      if psql -h postgres -U postgres -tc "SELECT 1 FROM pg_database WHERE datname = '\''n8n'\''" | grep -q 1; then
        echo "Database n8n already exists";
      else
        echo "Creating database n8n...";
        psql -h postgres -U postgres -c "CREATE DATABASE n8n;" || echo "Failed to create database";
      fi;
      echo "Database initialization complete";
      exit 0;
      '
    deploy:
      restart_policy:
        condition: none
      placement:
        constraints:
          - node.role == manager
    depends_on:
      - postgres

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - /mnt/truenas/docker_volumes/project-unity/prod/redis:/data
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  n8n:
    image: n8nio/n8n:stable
    user: "1000:1000"
    environment:
      - DB_TYPE=sqlite
      - WEBHOOK_URL=https://n8n.clubomatic.ai/
    depends_on:
      - postgres
    volumes:
      - /mnt/truenas/docker_volumes/project-unity/prod/n8n:/home/node/.n8n
    ports:
      - "5680:5678"
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:5678/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 120s
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 30s
        max_attempts: 5
      placement:
        constraints:
          - node.role == manager

networks:
  default:
    driver: overlay
    attachable: true
