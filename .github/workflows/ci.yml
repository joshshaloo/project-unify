name: CI/CD - Main Branches

on:
  push:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and validate everything through Docker
  build-and-validate:
    name: Build & Validate
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and validate with Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: tester  # This runs all tests in the multi-stage build
          build-args: |
            DATABASE_URL=postgresql://postgres:password@localhost:5432/test
            NEXTAUTH_SECRET=test-secret-for-build-only
            NEXTAUTH_URL=http://localhost:3000
      
      - name: Build and push production image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: runner

  # Deploy to appropriate environment
  deploy:
    needs: build-and-validate
    runs-on: ubuntu-latest
    
    steps:
      - name: Setup Tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
      
      - name: Deploy to Preview (develop branch)
        if: github.ref == 'refs/heads/develop'
        env:
          IMAGE_TAG: develop
        run: |
          echo "ðŸš€ Deploying to Preview environment..."
          curl -X POST \
            -H "X-API-Key: ${{ secrets.PORTAINER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "image": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop",
              "env": "preview"
            }' \
            ${{ secrets.PORTAINER_HOST }}/api/stacks/soccer-preview/git/deploy
      
      - name: Deploy to Production (main branch)
        if: github.ref == 'refs/heads/main'
        env:
          IMAGE_TAG: latest
        run: |
          echo "ðŸš€ Deploying to Production environment..."
          curl -X POST \
            -H "X-API-Key: ${{ secrets.PORTAINER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "image": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest",
              "env": "production"
            }' \
            ${{ secrets.PORTAINER_HOST }}/api/stacks/soccer-prod/git/deploy

  # Run E2E tests against deployed environment
  e2e-tests:
    needs: deploy
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps chromium
        working-directory: apps/web
      
      - name: Run E2E tests
        run: pnpm test:e2e --project=chromium
        working-directory: apps/web
        env:
          PLAYWRIGHT_BASE_URL: ${{ github.ref == 'refs/heads/main' && 'https://soccer-unify.com' || 'https://preview.soccer-unify.com' }}
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results-${{ github.sha }}
          path: |
            apps/web/playwright-report/
            apps/web/test-results/
          retention-days: 7