{
  "$schema": "https://json.schemastore.org/claude-code-settings.json",
  "permissions": {
    "allow": [
      "Bash(git init:*)",
      "Bash(mkdir:*)",
      "Bash(pnpm install:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(chmod:*)",
      "Bash(pnpm build:*)",
      "Bash(git push:*)",
      "Bash(git checkout:*)",
      "Bash(gh pr create:*)",
      "Bash(rm:*)",
      "Bash(pnpm add:*)",
      "Bash(pnpm db:seed:*)",
      "Bash(./scripts/setup-database.sh:*)",
      "Bash(ls:*)",
      "Bash(pnpm dev:*)",
      "Bash(curl:*)",
      "Bash(npm run dev:*)",
      "Bash(pkill:*)",
      "Bash(true)",
      "Bash(pnpm prisma generate:*)",
      "Bash(pnpm db:push:*)",
      "Bash(pnpm prisma db push:*)",
      "Bash(DATABASE_URL=\"postgresql://postgres.ouakhbtaifurigsjdnpt:oqsVz2h4HHhelAtD@aws-0-us-west-1.pooler.supabase.com:5432/postgres\" pnpm db:seed)",
      "Bash(pnpm run dev:*)",
      "Bash(pnpm typecheck:*)",
      "Bash(npx tsc:*)",
      "Bash(pnpm db:rls:*)",
      "Bash(pnpm prisma db pull:*)",
      "Bash(pnpm db:generate:*)",
      "mcp__playwright__browser_navigate",
      "mcp__playwright__browser_close",
      "mcp__playwright__browser_tab_list",
      "Bash(kill:*)",
      "mcp__playwright__browser_click",
      "mcp__playwright__browser_type",
      "mcp__playwright__browser_wait_for",
      "mcp__playwright__browser_console_messages",
      "mcp__playwright__browser_network_requests",
      "mcp__playwright__browser_snapshot",
      "mcp__playwright__browser_evaluate",
      "mcp__playwright__browser_take_screenshot",
      "mcp__n8n-mcp__n8n_create_workflow",
      "mcp__n8n-mcp__n8n_update_partial_workflow",
      "mcp__n8n-mcp__n8n_list_workflows",
      "mcp__n8n-mcp__tools_documentation",
      "mcp__n8n-mcp__n8n_health_check",
      "mcp__n8n-mcp__search_nodes",
      "mcp__n8n-mcp__get_node_essentials",
      "mcp__n8n-mcp__n8n_validate_workflow",
      "mcp__n8n-mcp__n8n_get_workflow_structure",
      "mcp__n8n-mcp__n8n_get_workflow",
      "mcp__n8n-mcp__n8n_update_full_workflow",
      "mcp__n8n-mcp__n8n_list_available_tools",
      "Bash(pnpm test:*)",
      "Bash(pnpm vitest:*)",
      "Bash(find:*)",
      "Bash(pnpm remove:*)",
      "Bash(mv:*)",
      "Bash(npm test)",
      "Bash(npm test:*)",
      "Bash(npm run test:unit:*)",
      "Bash(npx playwright test:*)",
      "Bash(gh run view:*)",
      "Bash(gh pr checks:*)",
      "Bash(npm run build:*)",
      "Bash(npx next build:*)",
      "Bash(node:*)",
      "Bash(npx prisma generate:*)",
      "Bash(grep:*)",
      "Bash(npm run:*)",
      "Bash(pnpm lint:*)",
      "Bash(docker-compose:*)",
      "Bash(make:*)",
      "Bash(docker compose:*)",
      "Bash(docker exec:*)",
      "Bash(echo:*)",
      "Bash(/dev/null)",
      "mcp__playwright__browser_tab_select",
      "Bash(pnpm playwright test:*)",
      "Bash(timeout 120 pnpm test:e2e --reporter=list)",
      "Bash(timeout 120 pnpm test:e2e --grep=\"should display dashboard after successful login\" --reporter=list)",
      "mcp__playwright__browser_tab_new",
      "Bash(timeout 60 pnpm test:e2e --grep=\"Dashboard\" --reporter=list)",
      "Bash(DEBUG=pw:api pnpm test:e2e --grep=\"should successfully register a new user with magic link\" --project=chromium e2e/auth.spec.ts)",
      "mcp__playwright__browser_press_key",
      "Bash(DEBUG=pw:api pnpm test:e2e --grep=\"should logout and clear session\" --project=chromium e2e/user-workflows.spec.ts)",
      "Bash(DEBUG=pw:api pnpm test:e2e --grep=\"should maintain session across browser refresh\" --project=chromium e2e/user-workflows.spec.ts)",
      "Bash(pntml test:e2e:*)",
      "Bash(DEBUG=pw:api pnpm test:e2e --grep=\"MailHog Integration Test\" --project=chromium e2e/test-mailhog.spec.ts)",
      "Bash(cat:*)",
      "Bash(DEBUG=pw:api pnpm test:e2e --grep=\"should maintain session across browser refresh\" --project=chromium --reporter=list)",
      "Bash(docker logs:*)",
      "Bash(docker volume rm:*)",
      "mcp__playwright__browser_navigate_forward",
      "Bash(pnpm prisma migrate dev:*)",
      "Bash(pnpm ls:*)",
      "Bash(docker restart:*)",
      "Bash(DATABASE_URL=postgresql://postgres:localpassword@localhost:5433/soccer pnpm db:push)",
      "Bash(timeout 60 pnpm test:e2e --grep \"should maintain session across browser refresh\" --reporter=list --project=chromium)",
      "Bash(sed:*)",
      "Bash(pntml playwright test:*)",
      "Bash(md-tree:*)",
      "Bash(CI=true pnpm test)",
      "Bash(gh run list:*)",
      "Bash(docker build:*)",
      "Bash(--build-arg DATABASE_URL=\"postgresql://postgres:password@localhost:5432/test\" )",
      "Bash(--build-arg NEXTAUTH_SECRET=\"test-secret-for-build-only\" )",
      "Bash(--build-arg NEXTAUTH_URL=\"http://localhost:3000\" )",
      "Bash(-t ghcr.io/joshshaloo/soccer/project-unify:validate-test .)",
      "Bash(git rev-parse:*)",
      "Bash(source .env)",
      "Bash(pip3 install:*)",
      "Bash(python3:*)",
      "Bash(DEBUG=1 python3 scripts/portainer_deploy.py bootstrap preview 55c39cc)",
      "WebFetch(domain:gist.github.com)",
      "WebFetch(domain:github.com)",
      "Bash(docker run:*)",
      "Bash(touch:*)",
      "Bash(-e NODE_ENV=production )",
      "Bash(-e DATABASE_URL=\"postgresql://postgres:localpassword@host.docker.internal:5433/soccer\" )",
      "Bash(-e NEXTAUTH_SECRET=\"test-secret-local\" )",
      "Bash(-e NEXTAUTH_URL=\"http://localhost:3000\" )",
      "Bash(ghcr.io/joshshaloo/soccer/project-unify:f8a657b )",
      "Bash(sh:*)",
      "Bash(-e NODE_ENV=production )",
      "Bash(-e DATABASE_URL=\"postgresql://postgres:localpassword@host.docker.internal:5433/soccer\" )",
      "Bash(-e NEXTAUTH_SECRET=\"test-secret-local\" )",
      "Bash(-e NEXTAUTH_URL=\"http://localhost:3000\" )",
      "Bash(ghcr.io/joshshaloo/soccer/project-unify:f8a657b )",
      "Bash(-e NODE_ENV=production )",
      "Bash(-e DATABASE_URL=\"postgresql://postgres:localpassword@host.docker.internal:5433/soccer\" )",
      "Bash(-e NEXTAUTH_SECRET=\"test-secret-local\" )",
      "Bash(-e NEXTAUTH_URL=\"http://localhost:3000\" )",
      "Bash(ghcr.io/joshshaloo/soccer/project-unify:f8a657b )",
      "Bash(-e NODE_ENV=production )",
      "Bash(-e DATABASE_URL=\"postgresql://postgres:localpassword@host.docker.internal:5433/soccer\" )",
      "Bash(-e DIRECT_URL=\"postgresql://postgres:localpassword@host.docker.internal:5433/soccer\" )",
      "Bash(-e NEXTAUTH_SECRET=\"test-secret-local\" )",
      "Bash(-e NEXTAUTH_URL=\"http://localhost:3000\" )",
      "Bash(ghcr.io/joshshaloo/soccer/project-unify:f8a657b )",
      "Bash(-e NODE_ENV=production )",
      "Bash(-e DATABASE_URL=\"postgresql://postgres:localpassword@host.docker.internal:5433/soccer\" )",
      "Bash(-e DIRECT_URL=\"postgresql://postgres:localpassword@host.docker.internal:5433/soccer\" )",
      "Bash(-e NEXTAUTH_SECRET=\"test-secret-local\" )",
      "Bash(-e NEXTAUTH_URL=\"http://localhost:3000\" )",
      "Bash(ghcr.io/joshshaloo/soccer/project-unify:f8a657b )",
      "Bash(-v /tmp/test-secrets/postgres_password:/run/secrets/postgres_password:ro )",
      "Bash(-v /tmp/test-secrets/nextauth_secret:/run/secrets/nextauth_secret:ro )",
      "Bash(-e NODE_ENV=production )",
      "Bash(-e NEXTAUTH_URL=\"http://localhost:3000\" )",
      "Bash(ghcr.io/joshshaloo/soccer/project-unify:f8a657b )",
      "Bash(ghcr.io/joshshaloo/soccer/project-unify:f8a657b )",
      "Bash(ghcr.io/joshshaloo/soccer/project-unify:23f2a7f )",
      "Bash(DEBUG=1 python3 scripts/portainer_deploy.py deploy preview 55c39cc --no-wait)",
      "Bash(ssh docker@172.20.0.22:*)",
      "Bash(DATABASE_URL=\"postgresql://postgres:password@172.20.0.22:5435/soccer\" pnpm prisma migrate deploy)",
      "Bash(pnpm prisma migrate resolve:*)",
      "Bash(env)",
      "Bash(PGPASSWORD=password psql:*)"
    ],
    "deny": []
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "n8n-mcp"
  ]
}