version: '3.8'

secrets:
  postgres_password:
    external: true
    name: soccer_preview_postgres_password
  nextauth_secret:
    external: true
    name: soccer_preview_nextauth_secret
  n8n_password:
    external: true
    name: soccer_preview_n8n_password

services:
  app:
    image: ${IMAGE:-ghcr.io/joshshaloo/soccer/project-unify:develop}
    environment:
      NODE_ENV: production
      REDIS_URL: redis://redis:6379
      NEXTAUTH_URL: https://preview.clubomatic.ai
      EMAIL_SERVER_HOST: mailhog
      EMAIL_SERVER_PORT: 1025
      EMAIL_FROM: noreply@preview.clubomatic.ai
      # Database URL and secrets are loaded from Docker secrets by entrypoint
    secrets:
      - postgres_password
      - nextauth_secret
    volumes:
      - /mnt/truenas/docker_volumes/project-unity/preview/uploads:/app/uploads
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == worker
    ports:
      - "3011:3000"
    depends_on:
      - postgres
      - redis
      - mailhog

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: soccer
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    secrets:
      - postgres_password
    volumes:
      - /mnt/truenas/docker_volumes/project-unity/preview/postgres:/var/lib/postgresql/data
    ports:
      - "5435:5432"
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker

  postgres-init:
    image: postgres:15-alpine
    secrets:
      - postgres_password
    command: >
      sh -c '
      export PGPASSWORD=$$(cat /run/secrets/postgres_password) &&
      until pg_isready -h postgres -U postgres; do
        echo "Waiting for postgres...";
        sleep 2;
      done;
      echo "Creating n8n database if it doesn'\''t exist...";
      psql -h postgres -U postgres -tc "SELECT 1 FROM pg_database WHERE datname = '\''n8n'\''" | grep -q 1 || psql -h postgres -U postgres -c "CREATE DATABASE n8n;";
      echo "Database initialization complete";
      '
    deploy:
      restart_policy:
        condition: none
      placement:
        constraints:
          - node.role == worker
    depends_on:
      - postgres

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - /mnt/truenas/docker_volumes/project-unity/preview/redis:/data
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker

  mailhog:
    image: mailhog/mailhog
    ports:
      - "8125:8025"  # Web UI
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker

  n8n:
    image: n8nio/n8n:stable
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_HOST=preview-n8n.clubomatic.ai
      - N8N_WEBHOOK_URL=https://preview-n8n.clubomatic.ai
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=postgres
      - N8N_BASIC_AUTH_PASSWORD_FILE=/run/secrets/n8n_password
      - DB_POSTGRESDB_PASSWORD_FILE=/run/secrets/postgres_password
    secrets:
      - n8n_password
      - postgres_password
    depends_on:
      - postgres-init
    volumes:
      - /mnt/truenas/docker_volumes/project-unity/preview/n8n:/home/node/.n8n
    ports:
      - "5681:5678"
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker