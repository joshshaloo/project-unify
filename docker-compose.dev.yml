services:
  # Next.js app with hot reload support
  web:
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile.dev
    container_name: project-unify-web
    env_file:
      - .env
    volumes:
      # Mount source code for hot reload
      - ./apps/web/src:/workspace/apps/web/src
      - ./apps/web/public:/workspace/apps/web/public
      - ./apps/web/prisma:/workspace/apps/web/prisma
      - ./apps/web/.env.local:/workspace/apps/web/.env.local
      - ./apps/web/tsconfig.json:/workspace/apps/web/tsconfig.json
      - ./tsconfig.json:/workspace/tsconfig.json
      # Mount shared packages for hot reload
      - ./packages:/workspace/packages
      # Preserve node_modules and .next from container
      - web_node_modules:/workspace/node_modules
      - web_next:/workspace/apps/web/.next
    ports:
      - "${APP_PORT:-3001}:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-localpassword}@postgres:5432/${POSTGRES_DB:-soccer}
      - DIRECT_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-localpassword}@postgres:5432/${POSTGRES_DB:-soccer}
      - REDIS_URL=redis://redis:6379
      - EMAIL_SERVER_HOST=mailhog
      - EMAIL_SERVER_PORT=1025
      - EMAIL_FROM=noreply@soccer-unify.local
      - NEXTAUTH_URL=http://localhost:${APP_PORT:-3001}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-development-secret-key-change-in-production}
      - NEXT_PUBLIC_APP_URL=http://localhost:${APP_PORT:-3001}
      - N8N_WEBHOOK_URL=http://n8n:5678/webhook
      # Enable webpack hot reload polling for Docker
      - WATCHPACK_POLLING=true
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: pnpm dev
  
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-localpassword}
      POSTGRES_DB: ${POSTGRES_DB:-soccer}
      POSTGRES_MULTIPLE_DATABASES: soccer,n8n
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/create-multiple-databases.sh:/docker-entrypoint-initdb.d/create-multiple-databases.sh
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  mailhog:
    image: mailhog/mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    logging:
      driver: 'none'

  n8n:
    image: n8nio/n8n
    environment:
      - N8N_BASIC_AUTH_ACTIVE=false
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_WEBHOOK_URL=http://localhost:5678/
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_DATABASE=${N8N_DB_NAME:-n8n}
      - DB_POSTGRESDB_USER=${POSTGRES_USER:-postgres}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD:-localpassword}
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  postgres_data:
  n8n_data:
  web_node_modules:
  web_next: